import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Grafo {
    private Map<String, List<String>> grafo;

    public Grafo() {
        grafo = new HashMap<>();
    }

    public void adicionarVertice(String vertice) {
        if (!grafo.containsKey(vertice)) {
            grafo.put(vertice, new ArrayList<>());
        }
    }

    public void adicionarAresta(String origem, String destino) {
        if(grafo.containsKey(origem) && grafo.containsKey(destino)) {
            grafo.get(origem).add(destino);
        }
    }

    public void contarVertices() {
        int numVertices = grafo.size();
        System.out.println("Numero de Vertices: " + numVertices);
    }

    public void contarArestas() {
        int numArestas = 0;

        for(List<String> vizinhos : grafo.values()) {
            numArestas += vizinhos.size();
        }
        System.out.println("Numero de Arestas: " + numArestas);
    }

    public void mostrarGrafo() {
        for(String chave : grafo.keySet()) {
            System.out.println(chave + " -> " + grafo.get(chave));
        }
    }
}

public class AtvGrafo6{
    public static void main(String[] args) {
        Grafo grafo = new Grafo();

        grafo.adicionarVertice("A");
        grafo.adicionarVertice("B");
        grafo.adicionarVertice("C");
        grafo.adicionarVertice("D");
        grafo.adicionarVertice("E");
        
        grafo.adicionarAresta("A", "B");
        grafo.adicionarAresta("A", "C");
        grafo.adicionarAresta("B", "D");
        grafo.adicionarAresta("C", "D");
        grafo.adicionarAresta("D", "E");
        grafo.adicionarAresta("E", "A");

        grafo.mostrarGrafo();
        grafo.contarVertices();
        grafo.contarArestas();
    }
}
